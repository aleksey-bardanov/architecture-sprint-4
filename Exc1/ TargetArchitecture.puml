@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Целевая архитектура проекта "Александрит"

AddRelTag("brocker_message", $lineStyle = DashedLine())
AddRelTag("3d_models", $lineColor = "Orange")

LAYOUT_WITH_LEGEND()

Person_Ext(customer, "Покупатель", "Заказывает изделие для себя")
Person(seller, "Продавец", "Обрабатывает заказ покупателя, подтверждает заказчику, что заказ изготавливается")
Person_Ext(api_user, "B2B клиент", "Засчитывает стоимость заказа, размещает его через внешний API")
Person(operator, "Оператор", "Берет заказы в работу")

System_Boundary(jewerly_store, "Система обработки заказов магазина Александрит") {
    System_Boundary(mes, "Система управления производством") {
        Container(mes_fe, "Система управления производством. Web приложение.", "Typescript, React", "Предоставляет интерфейс для операторов и список заказов")
        Container(mes_be, "Система управления производством. Сервис.", "java, SpringBoot", "Калькуляция цены, список заказов, передача заказов операторам")
        ContainerDb(mes_db, "Devices Control Database", "PostgreSQL", "Хранит информацию о заказах, взятых в работу, о том какие операторы какие заказы выполняют")
    }

    Container(3d_files_storage, "Система хранения 3D моделей", "java, SpringBoot", "Хранит 3D модели")

    System_Boundary(sensors, "Система управления заказами") {
        Container(crm_fe, "Система управления заказами. Web приложение", "Vue, TypeScript", "Web интерфейс для продавцов")
        Container(crm_be, "Система управления заказами. Сервис", "Java, Spring Boot", "Работа с заказами, отслеживание их статусов")
    }
    
    System_Boundary(shop, "Интернет магазин") {
        Container(shop_fe, "Интернет магазин. Web приложение.", "Vue, TypeScript, Threejs", "Оформление заказов, загрузка 3D моделей, 3D редактор")
        Container(shop_be, "Интернет магазин. Сервис.", "java, SpringBoot", "Личный кабинет пользователя, сохранение 3D моделей, список покупок")
        ContainerDb(shop_db, "База данный интернет магазина", "PostgreSQL", "Хранит информацию о покупателях и их заказах")
    }
    
    SystemQueue(message_brocker, "Брокер сообщений", "RabbitMQ", "Уведомляет подписчиков о новых заказах и об изменении статуса текущих")
}

Rel(customer, shop_fe, "UI")
Rel(seller, crm_fe, "UI")
Rel(api_user, mes_be, "REST")
Rel(operator, mes_fe, "UI")

Rel(shop_fe, shop_be, "REST")
Rel(crm_fe, crm_be, "REST")
Rel(mes_fe, mes_be, "REST")

Rel(shop_be, shop_db, "чтение/запись")
Rel(crm_be, shop_db, "чтение/запись")
Rel(mes_be, mes_db, "чтение/запись")

Rel(shop_be, 3d_files_storage, "запись", $tags="3d_models")
Rel(crm_be, 3d_files_storage, "чтение", $tags="3d_models")
Rel(mes_be, 3d_files_storage, "чтение", $tags="3d_models")

Rel(crm_be, message_brocker, "статус заказа", $tags="brocker_message")
Rel(mes_be, message_brocker, "статус заказа", $tags="brocker_message")

@enduml